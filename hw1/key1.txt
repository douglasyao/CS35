Exercise 1.1:
C-s P U B L I C Enter
C-s L a Enter M-b
C-s s e l f Enter M-b
C-s a r r o w Enter M-b
C-e
C-a
C-x C-c

Exercise 1.2:
M-g g 1 8 Enter C-k
C-s D E Enter C-a C-k
C-s < ! Enter C-a C-Space Down Down Down C-w
C-s < ! Left Left C-Space Right Right Right Right Right Right C-w
C-s < ! Enter C-a C-k
C-x C-s
C-x C-c

Exercise 1.3:
C-s A Enter M-f M-f Backspace 3 7 
C-s A Enter M-f M-f Backspace 3 7 
M-< C-s U T F - 8 Enter Backspace Backspace Backspace Backspace S - A S C I I
C-s < / o Enter C-a Enter
C-x C-s
C-x C-c

Exercise 1.4:
M-> C-r < ! Enter C-Space C-e M-w M-g g 3 5 2 C-y
M-> C-r < ! C-r Enter C-Space Right Right Right Right Right Right M-w 
M-g g 3 3 7 C-e Left Left Left Left Left C-y
M-> C-r < ! C-r C-r Enter C-Space Down Down Down Left M-w 
M-g g 3 0 3 C-y Up Right Backspace Up Right Backspace
M-> C-r < ! C-r C-r C-r Enter C-Space C-e M-w M-g g 9 3 C-y 
M-> C-r < ! C-r C-r C-r C-r Enter C-space C-e M-w M-g g 1 8 C-y 
M-g g 3 5 6 C-Space M-> C-w
C-x u
M-g g 3 5 6 < ! - - M-> - - >
M-x r e p l a c e - s t r i n g Enter < o l > Enter < O l > Enter 
(Total of 7 instances)

Exercise 1.5:
C-x d Enter + j u n k Enter
C-x C-v j u n k Enter C-x C-f h e l l o . c Enter
M-x c o m p i l e Enter h e l l o Enter
C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c \
 char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n\
, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6:
C-x b Enter ( r a n d o m ) C-j
( s e t q Space x Space ( r a n d o m ) ) C-j
( s e t q Space y Space ( r a n d o m ) ) C-j
( * Space x Space y ) C-j 
(Although x and y are both positive, the product is negative)
M-: ( * Space x Space y ) Enter 
(The product is following by two strings in parenthesis)
No, "random" integers are generated in a deterministic fashion by plugging a 
seed value into a function.
The largest possible 64-bit signed integer is 2^63 - 1. 
The product is mathematically incorrect when the product exceeds this value. 
To find the probability, you can evaluate the integral of f(x) = (2^63-1)/x from 1 to 2^63-1, 
then divide by (2^63-1)^2. This comes out to around 4.72 x 10^-18.  



